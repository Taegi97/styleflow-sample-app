# Í∏∞Ï°¥ ÏûòÎ™ªÎêú ÌååÏùº Ï†úÍ±∞
Remove-Item .github\workflows\pr-preview.yml -Force -ErrorAction SilentlyContinue

# Ïò¨Î∞îÎ•∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌååÏùº ÏÉùÏÑ±
@'
name: PR Preview Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  pull_request_target:
    types: [closed]
    branches: [main]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: styleflow-app
  EKS_CLUSTER_NAME: styleflow-cluster

jobs:
  deploy-preview:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: pr-${{ github.event.number }}-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy to PR namespace
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: pr-${{ github.event.number }}-${{ github.sha }}
        NAMESPACE: pr-${{ github.event.number }}
      run: |
        # Create namespace if not exists
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f - --validate=false
        
        # Wait for namespace to be ready
        sleep 3
        
        # Apply deployment with environment variable substitution
        envsubst < k8s/deployment.yaml | kubectl apply -n $NAMESPACE -f - --validate=false
        
        # Apply service
        kubectl apply -n $NAMESPACE -f k8s/service.yaml --validate=false
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/styleflow-deployment -n $NAMESPACE --timeout=300s

    - name: Get external URL
      id: get-url
      env:
        NAMESPACE: pr-${{ github.event.number }}
      run: |
        echo "Waiting for LoadBalancer to get external IP..."
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get svc styleflow-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          if [ ! -z "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "null" ]; then
            echo "LoadBalancer ready with hostname: $EXTERNAL_IP"
            echo "url=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT
            break
          fi
          echo "Waiting for LoadBalancer... ($i/30)"
          sleep 10
        done
        
        # If no external hostname after 5 minutes, check for IP
        if [ -z "$EXTERNAL_IP" ] || [ "$EXTERNAL_IP" = "null" ]; then
          EXTERNAL_IP=$(kubectl get svc styleflow-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ ! -z "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "null" ]; then
            echo "LoadBalancer ready with IP: $EXTERNAL_IP"
            echo "url=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT
          else
            echo "Warning: LoadBalancer not ready after 5 minutes"
            kubectl get svc -n $NAMESPACE
            echo "url=pending" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install test dependencies
      run: |
        npm install

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Create test reports directory
      run: mkdir -p reports/screenshots

    - name: Run E2E tests
      env:
        PREVIEW_URL: ${{ steps.get-url.outputs.url }}
      run: |
        if [ "$PREVIEW_URL" != "pending" ] && [ ! -z "$PREVIEW_URL" ]; then
          echo "üß™ Running E2E tests against: $PREVIEW_URL"
          npm run test:e2e
        else
          echo "‚è≠Ô∏è Skipping E2E tests - Preview URL not ready"
        fi
      continue-on-error: true

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-pr-${{ github.event.number }}
        path: |
          reports/
          test-results/
        retention-days: 7

    - name: Comment PR with enhanced results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const url = '${{ steps.get-url.outputs.url }}';
          
          let testResults = {
            status: '‚è≠Ô∏è',
            summary: 'Tests skipped (Preview URL not ready)',
            details: ''
          };
          
          try {
            if (fs.existsSync('reports/test-results.json')) {
              const results = JSON.parse(fs.readFileSync('reports/test-results.json', 'utf8'));
              const passed = results.suites.reduce((sum, suite) => 
                sum + suite.specs.filter(spec => spec.tests[0].status === 'passed').length, 0);
              const failed = results.suites.reduce((sum, suite) => 
                sum + suite.specs.filter(spec => spec.tests.status === 'failed').length, 0);
              const total = passed + failed;
              
              testResults = {
                status: failed === 0 ? '‚úÖ' : '‚ùå',
                summary: `${passed}/${total} tests passed`,
                details: failed === 0 
                  ? 'üéâ All tests passed!' 
                  : `‚ùå ${failed} test(s) failed - [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              };
            }
          } catch (error) {
            testResults = {
              status: '‚ùå',
              summary: 'Test execution error',
              details: 'Failed to parse test results'
            };
          }
          
          let commentBody;
          if (url && url !== 'pending') {
            commentBody = `üöÄ **PR Preview Deployed!**
          
          üì± **Preview URL:** ${url}
          üè∑Ô∏è **Image Tag:** \`pr-${{ github.event.number }}-${{ github.sha }}\`
          üì¶ **Namespace:** \`pr-${{ github.event.number }}\`
          
          üß™ **Automated Testing:**
          ${testResults.status} **E2E Tests:** ${testResults.summary}
          ${testResults.details}
          
          üìä [View Test Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          > This environment will be automatically deleted when the PR is closed.`;
          } else {
            commentBody = `üöÄ **PR Preview Deployed!**
          
          ‚è≥ **Status:** LoadBalancer provisioning...
          üè∑Ô∏è **Image Tag:** \`pr-${{ github.event.number }}-${{ github.sha }}\`
          üì¶ **Namespace:** \`pr-${{ github.event.number }}\`
          
          üß™ **Automated Testing:**
          ${testResults.status} **E2E Tests:** ${testResults.summary}
          
          > LoadBalancer IP allocation may take up to 5-10 minutes.
          > This environment will be automatically deleted when the PR is closed.`;
          }
          
          // Update existing comment or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('üöÄ **PR Preview')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

  cleanup-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Delete PR namespace
      env:
        NAMESPACE: pr-${{ github.event.number }}
      run: |
        echo "Cleaning up namespace: $NAMESPACE"
        kubectl delete namespace $NAMESPACE --ignore-not-found=true --timeout=60s --validate=false
        echo "Namespace $NAMESPACE cleanup completed"

    - name: Comment PR cleanup
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `üóëÔ∏è **PR Preview Cleaned Up**
            
            Namespace \`pr-${{ github.event.number }}\` has been deleted.
            All resources associated with this PR preview have been removed.`
          });
'@ | Out-File -FilePath ".github\workflows\pr-preview.yml" -Encoding UTF8
