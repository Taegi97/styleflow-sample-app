name: PR Preview Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  pull_request_target:
    types: [closed]
    branches: [main]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: styleflow-app
  EKS_CLUSTER_NAME: styleflow-cluster

jobs:
  # PR이 열리거나 업데이트될 때 실행되는 배포/테스트 작업
  deploy-preview:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      id-token: write      # AWS OIDC 인증을 위해 필요
      contents: read       # 코드를 Checkout 하기 위해 필요
      pull-requests: write # PR에 댓글을 남기기 위해 필요

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }} # GitHub Secrets에 등록해야 할 역할 ARN
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: pr-${{ github.event.number }}-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy to EKS
      env:
        NAMESPACE: pr-${{ github.event.number }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.build-image.outputs.tag }}
      run: |
        # gettext-base 패키지 설치 (envsubst 명령어 사용을 위해)
        sudo apt-get update && sudo apt-get install -y gettext-base

        # PR 번호 기반의 네임스페이스 생성
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f - --validate=false
        
        # deployment.yaml 파일에 이미지 태그를 주입하여 배포
        envsubst < k8s/deployment.yaml | kubectl apply -n $NAMESPACE -f - --validate=false
        
        # service.yaml 배포
        kubectl apply -n $NAMESPACE -f k8s/service.yaml --validate=false
        
        # 배포가 완료될 때까지 대기 (최대 5분)
        kubectl rollout status deployment/styleflow-deployment -n $NAMESPACE --timeout=300s

    - name: Get external URL
      id: get-url
      env:
        NAMESPACE: pr-${{ github.event.number }}
      run: |
        echo "Waiting for LoadBalancer to get external hostname..."
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get svc styleflow-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          if [ ! -z "$EXTERNAL_IP" ]; then
            echo "LoadBalancer ready: $EXTERNAL_IP"
            echo "url=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 10
        done

    # E2E 테스트 단계 (주석 처리 - 필요 시 주석 해제하여 사용)
    # - name: Setup Node.js
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: '18'

    # - name: Install test dependencies & browsers
    #   run: |
    #     npm install
    #     npx playwright install --with-deps
        
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const url = '${{ steps.get-url.outputs.url }}';
          let commentBody;
          if (url) {
            commentBody = `🚀 **PR Preview Deployed!**
            
            📱 **Preview URL:** ${url}
            🏷️ **Image Tag:** \`${{ steps.build-image.outputs.tag }}\`
            📦 **Namespace:** \`pr-${{ github.event.number }}\`
            
            > This environment will be automatically deleted when the PR is closed.`;
          } else {
            commentBody = `🚀 **PR Preview Deployment Failed**
            
            Deployment succeeded, but the LoadBalancer did not become available in time.
            Please check the workflow logs for more details.`;
          }
          
          // 기존 코멘트 찾아서 업데이트하거나 새로 생성
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('🚀 **PR Preview')
          );

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

  # PR이 닫혔을 때 실행되는 정리 작업
  cleanup-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Delete PR namespace
      env:
        NAMESPACE: pr-${{ github.event.number }}
      run: |
        echo "Cleaning up namespace: $NAMESPACE"
        kubectl delete namespace $NAMESPACE --ignore-not-found=true

    - name: Comment PR cleanup
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `🗑️ **PR Preview Cleaned Up**
            
            Namespace \`pr-${{ github.event.number }}\` and all associated resources have been deleted.`
          });